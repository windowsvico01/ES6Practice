!function(e){var t={};function s(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(r,i,function(t){return e[t]}.bind(null,i));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=15)}({0:function(e,t,s){"use strict";t.a=class{constructor(){this.items={}}has(e){return e in this.items}set(e,t){this.items[e]=t}remove(e){return!!this.has(e)&&(delete this.items[e],!0)}get(e){return this.has(e)?this.items[e]:void 0}values(){const e=[];for(var t in this.items)this.items.hasOwnProperty(t)&&e.push(this.items[t]);return e}clear(){return this.items={},!0}size(){return Object.keys(this.items).length}keys(){return Object.keys(this.items)}}},15:function(e,t,s){"use strict";s.r(t);var r=s(0);var i=class{constructor(){this.items=[]}enqueue(e){this.items.push(e)}dequeue(){return this.items.shift()}front(){return this.items[0]}isEmpty(){return 0===this.items.length}size(){return this.items.length}print(){console.log(this.items.toString())}};const n=new class{constructor(){this.vertices=[],this.adjList=new r.a}addVertex(e){this.vertices.push(e),this.adjList.set(e,[])}addEdge(e,t){this.adjList.get(e).push(t),this.adjList.get(t).push(e)}toString(){let e="";return this.vertices.forEach(t=>{e+=`${t} -> `,this.adjList.get(t).forEach(t=>{e+=`${t} `}),e+="\n"}),e}initializeColor(){const e={};return this.vertices.forEach(t=>{e[t]="white"}),e}bfs(e,t){const s=this.initializeColor(),r=new i,n={},o={};for(r.enqueue(e),this.vertices.forEach(e=>{n[e]=0,o[e]=null});!r.isEmpty();){const e=r.dequeue(),i=this.adjList.get(e);s[e]="grey",i.forEach(t=>{"white"===s[t]&&(s[t]="grey",n[t]=n[e]+1,o[t]=e,r.enqueue(t))}),s[e]="black",t&&t(e)}return{distances:n,predecessors:o}}dfs(e){let t=0;const s=this.initializeColor(),r={},i={},n={},o=(e,s,u)=>{console.log(`discovered ${e}`),s[e]="grey",r[e]=++t,u&&u(e),this.adjList.get(e).forEach(t=>{const r=t;"white"===s[r]&&(n[r]=e,o(r,s,u))}),s[e]="black",i[e]=++t,console.log(`explored ${e}`)};return this.vertices.forEach(e=>{i[e]=0,r[e]=0,n[e]=null}),this.vertices.forEach(t=>{"white"===s[t]&&o(t,s,e)}),{discovery:r,finished:i,predecessors:n}}};n.addVertex("A"),n.addVertex("B"),n.addVertex("C"),n.addVertex("D"),n.addVertex("E"),n.addVertex("F"),n.addEdge("A","B"),n.addEdge("A","C"),n.addEdge("D","B"),n.addEdge("F","B"),n.addEdge("F","E"),n.addEdge("E","C"),console.log(n.toString());console.log(n.bfs("A")),console.log(n.dfs(e=>{console.log(`Visited vertex: ${e}`)}))}});